segment.color = "grey50",
segment.size = 0.75,
size = 3.8,
family = "Ringbearer"
) +
scale_color_manual(values = c("OVER-represented in movies" = "firebrick",
"UNDER-represented in movies" = "navyblue")) +
theme_minimal() +
theme(legend.position = "none",
plot.title = element_text(size=45, face="bold", hjust = 0.5,
margin = margin(15, 0, 15, 0))) +
ggtitle("Lord of the Rings Characters") +
theme(
plot.title = element_text(family = "Ringbearer", size = 40, face = "bold"),
#axis.text = element_blank(),
axis.text.x = element_text(angle = 0, size = 8, vjust = 4),
axis.text.y = element_text(angle = 0, size = 8, vjust = 1),
axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 0, size = 15),
panel.grid = element_blank(),
panel.background = element_rect(fill = "#fbfbf0", color = "#fbfbf0"),
plot.background = element_rect(fill = "#fbfbf0")
) +
labs(
x = "Number of Mentions in Books",
y = "Screen Time in Films (minutes)",
color = "",
caption = "Source: The Lord of the Rings, @Matthew Stewart"
) +
annotate("text",
x = 100, y = 85,
label = "OVER represented \nin movies",
color = "firebrick",
size = 6,
family = "Ringbearer") +
annotate("text",
x = 1300, y = 10,
label = "UNDER represented \nin movies",
color = "navyblue",
size = 6,
family = "Ringbearer")
book_reviews <- read_csv("C:/Users/austi/Downloads/book_reviews.csv")
library(tidyverse)
library(tidyverse)
book_reviews <- read_csv("C:/Users/austi/Downloads/book_reviews.csv")
View(book_reviews)
glimpse(book_reviews)
str(book_reviews)
book_reviews |>
count(distinct(review))
book_reviews |>
count(distinct(book))
book_reviews |>
count(book)
book_reviews |>
count(desc(book))
book_reviews |>
summarise(count = distinct(book))
book_reviews |>
summarise(count = book)
book_reviews |>
count(book)
book_reviews |>
count(-book)
book_reviews |>
count(desc(book))
book_reviews |>
count(book) |>
arrange(desc(n))
book_reviews |>
count(review) |>
arrange(desc(n))
book_reviews |>
count(state) |>
arrange(desc(n))
book_reviews |>
count(book) |>
arrange(desc(n))
book_reviews |>
count(review) |>
arrange(desc(n))
library(tidyverse)
book_reviews <- read_csv("C:/Users/austi/Downloads/book_reviews.csv")
str(book_reviews)
book_reviews |>
count(book) |>
arrange(desc(n))
book_reviews |>
count(review) |>
arrange(desc(n))
book_reviews |>
count(state) |>
arrange(desc(n))
filter(!(is.na(review))
filter(!(is.na(review))
book_reviews <- book_reviews |>
filter(!is.na(review))
book_reviews |>
count(review) |>
arrange(desc(n))
2000-1794
book_reviews |>
count(review) |>
arrange(desc(n))
book_reviews <- read_csv("C:/Users/austi/Downloads/book_reviews.csv")
book_reviews |>
count(state) |>
arrange(desc(n))
book_reviews <- book_reviews |>
mutate(state = case_when(
state == "CA" ~ "California",
state == "NY" ~ "New York",
state = "FL" ~ "Florida",
state == "TX" ~ "Texas",
TRUE ~ state
))
book_reviews <- book_reviews |>
mutate(state = case_when(
state == "CA" ~ "California",
state == "NY" ~ "New York",
state == "FL" ~ "Florida",
state == "TX" ~ "Texas",
TRUE ~ state
))
book_reviews |>
count(state) |>
arrange(desc(n))
book_reviews |>
count(review) |>
arrange(desc(n))
book_reviews <- book_reviews |>
mutate(state = case_when(
state == "CA" ~ "California",
state == "NY" ~ "New York",
state == "FL" ~ "Florida",
state == "TX" ~ "Texas",
TRUE ~ state
)) |>
mutate(review_num = case_when(
review == "Poor" ~ 1,
review == "Fair" ~ 2,
review == "Good" ~ 3,
review == "Great" ~ 4,
review == "Excellent" ~ 5,
)) |>
mutate(is_high_review = review_num >= 4)
View(book_reviews)
book_reviews |>
count(book) |>
arrange(desc(n))
profitability <- book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price))
View(profitability)
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated))
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = book, y = total_generated)) +
theme_bw()
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book), y = total_generated)) +
theme_bw()
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book, -total_generated) y = total_generated)) +
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book, -total_generated) y = total_generated)) +
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot(aes(x = reorder(book, -total_generated) y = total_generated)) +
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book, -total_generated), y = total_generated)) +
theme_bw()
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book, -total_generated), y = total_generated)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45))
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book, -total_generated), y = total_generated)) +
coord_flip() +
theme_bw()
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book, total_generated), y = total_generated)) +
coord_flip() +
theme_bw() +
labs(
x = "Total Generated (USD)",
y = "",
title = "'Secrets of R for Advanced Students' is the Top Selling Book for New Programmers"
)
library(stringr)
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book, total_generated), y = total_generated)) +
coord_flip() +
theme_bw() +
labs(
x = "Total Generated (USD)",
y = "",
title = "'Secrets of R for Advanced Students' is the Top Selling Book for New Programmers"
) +
scale_y_continuous(labels = function(x) str_wrap(as.character(x), width = 10))
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book, total_generated), y = total_generated)) +
coord_flip() +
theme_bw() +
labs(
x = "Total Generated (USD)",
y = "",
title = "'Secrets of R for Advanced Students' is the Top Selling Book for New Programmers"
) +
scale_y_continuous(labels = function(x) str_wrap(as.character(x), width = 10))
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book, total_generated), y = total_generated)) +
coord_flip() +
theme_bw() +
labs(
x = "Total Generated (USD)",
y = "",
title = "'Secrets of R for Advanced Students' is the Top Selling Book for New Programmers"
) +
scale_y_continuous(labels = function(x) str_wrap(as.character(x), width = 5))
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book, total_generated), y = total_generated)) +
coord_flip() +
theme_bw() +
labs(
y = "Total Generated (USD)",
x = "",
title = "'Secrets of R for Advanced Students' is the \nTop Selling Book for New Programmers"
)
book_reviews |>
group_by(book) |>
summarise(total_generated = sum(price)) |>
arrange(desc(total_generated)) |>
ggplot() +
geom_col(aes(x = reorder(book, total_generated), y = total_generated)) +
coord_flip() +
theme_bw() +
labs(
y = "Total Generated (USD)",
x = "",
title = "'Secrets of R for Advanced Students' is the \nTop Selling Book for New Programmers\n"
)
book_reviews |>
group_by(book)
book_reviews |>
select(book, price) |>
arrange(book)
book_reviews |>
distinct(book, .keep_all = TRUE) |>
select(book, price) |>
arrange(book)
book_reviews |>
distinct(book) |>
select(book, price) |>
arrange(book)
.keep_all
book_reviews |>
distinct(book, .keep_all = TRUE) |>
select(book, price) |>
arrange(book)
book_reviews |>
distinct(book) |>
select(book, price) |>
arrange(book)
, .keep_all = TRUE
book_reviews |>
distinct(book, .keep_all = TRUE) |>
select(book, price) |>
arrange(book)
arrange(desc(book)
book_reviews |>
book_reviews |>
distinct(book, .keep_all = TRUE) |>
select(book, price) |>
arrange(desc(book))
book_reviews |>
group_by(book) |>
summarise(price = first(price)) |>
arrange(book)
book_reviews |>
group_by(book) |>
summarise(price = first(price)) |>
arrange(book)
book_reviews |>
distinct(book, .keep_all = TRUE) |>
select(book, price) |>
arrange(desc(price))
amazon_data <- read_csv("C:\Users\austi\Downloads\survey.pub.csv")
amazon_data <- read_csv("C:/Users/austi/Downloads/survey.pub.csv")
library(tidyverse)
amazon_data <- read_csv("C:/Users/austi/Downloads/survey.pub.csv")
View(amazon_data)
amazon_data_2 <- read_csv("C:/Users/austi/Downloads/survey.csv")
View(amazon_data_2)
usethis::create_from_github("r4ds/bookclub-r4ds")
library(tidyverse)
library(nycflights13)
flights
view(flights)
flights |>
arrange(year, month, day, dep_time)
flights |>
arrange(desc(year, month, day, dep_time))
flights |>
arrange(desc(dep_time))
flights |>
arrange(desc(year), desc(month), desc(day), desc(dep_time))
flights |>
arrange(desc(year), desc(month), desc(day), desc(dep_time))
flights |>
distinct()
flights
flights |>
distinct()
flights |>
distince(origin, dest)
flights |>
distinct(origin, dest)
flights |>
distinct(origin, dest, .keep_all = TRUE)
flights |>
count(origin, dest, sort = TRUE)
flights |>
filter(arr_delay >= 120) |>
arrange(desc(arr_delay)) |>
relocate(arr_delay)
flights |>
filter(dest %in% c("IAH", "HOU"))
flights |>
filter(dest %in% c("IAH", "HOU")) |>
relocate(dest)
flights |>
filter(arr_delay >= 120 & dep_delay <= 0) |>
relocate(arr_delay, dep_delay)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
flights |>
filter(arr_delay >= 120 & dep_delay <= 0) |>
relocate(arr_delay, dep_delay)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60,
.before = 1
)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60,
.before = 3
)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60,
.keep = "used"
)
flights <- flights
View(flights)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60,
.keep = "none"
)
flights |>
select(!year:day)
View(flights)
flights |>
select(where(is.character))
flights |>
select(starts_with("J"))
flights |>
select(starts_with("dep"))
flights |>
select(contains("delay"))
flights |>
select(num_range("x", 1:3))
flights |>
relocate(year:dep_time, .after = time_hour)
flights |>
filter(dest == "IAH") |>
mutate(speed = distance / air_time * 60) |>
select(year:day, dep_time, carrier, flight, speed)
flights |>
filter(dest == "IAH") |>
mutate(speed = distance / air_time * 60) |>
select(year:day, dep_time, carrier, flight, speed) |>
arrange(desc(speed))
flights |>
group_by(dest) |>
slice_max(arr_delay, n = 1)
flights |>
group_by(dest) |>
slice_max(arr_delay, n = 1) |>
relocate(dest)
daily <- flights |>
group_by(year, month, day)
daily
daily_flights <- daily |>
summarise(n = n())
daily |>
summarise(n = n())
daily |>
summarise(
n = n(),
.groups = "drop_last"
)
daily |>
summarise(n = n())
daily |>
summarise(
n = n(),
.groups = "drop_last"
)
daily |>
summarise(n = n())
flights |>
summarize(
delay = mean(dep_delay, na.rm = TRUE),
n = n(),
.by = month
)
library(tidyverse)
speed_dating <- read_csv("C:/Users/austi/Downloads/Speed_dating_data.csv")
View(speed_dating)
library(tidyverse)
library(nycflights13)
# Conversion function between acres and hectares
convert_area <- function(value, from = c("acres", "hectares")) {
# Ensure 'from' argument matches exactly either "acres" or "hectares"
from <- match.arg(from)
# Conversion factors
acre_to_hectare <- 0.404686
hectare_to_acre <- 1 / acre_to_hectare
# Perform conversion based on the input
if (from == "acres") {
result <- value * acre_to_hectare
message(sprintf("%f acres is equal to %f hectares", value, result))
} else if (from == "hectares") {
result <- value * hectare_to_acre
message(sprintf("%f hectares is equal to %f acres", value, result))
}
return(result)
}
convert_area(15, from = acres)
convert_area(15, from = "acres")
convert_area(15, from = "hectares")
library(devtools)
create_package("C:/Users/austi/OneDrive/Desktop/R/intern_project")
create_package("C:/Users/austi/OneDrive/Desktop/R/intern_project/africa_ag_data")
create_package("C:/Users/austi/OneDrive/Desktop/R/intern_project/AfricaAgData")
